@startuml

title __MODEL's Class Diagram__\n

  namespace SongCreatorWindow {
    namespace Model {
      class SongCreatorWindow.Model.GlobalSettings {
          {static} + Height : double
          {static} + InstrumentChoice : int
          {static} + InstrumentForParticularNoteChoice : int
          {static} + Width : double
          {static} + accordSelectionName : String
          {static} + canvasExtension : int
          {static} + chosenNote : char
          {static} + constBarFactor_WidthPerTick : double
          {static} + defaultMusicClef : MusicClefSelection
          {static} + fileNameWithProjectList : String
          {static} + fileNameWithProjectListView : String
          {static} + fixedXPositionOfNotes : int
          {static} + loadingProject : boolean
          {static} + midiExtension : String
          {static} + musicClefWidth : double
          {static} + noteHeight : int
          {static} + noteWidth : int
          {static} + numberOfPropertySquaresInPath : int
          {static} + projectsExtensions : String
          {static} + selectedTypeOfSoundToInsertIntoPath : SoundTypeSelection
          {static} + selectionColor : Color
          {static} + skipBindingAfterLoad : boolean
          {static} + strokeLineBorderWidth : int
          {static} + strokeLineWidthForSelection : int
          {static} + tieBetweenNotes : TieSelection
          {static} + widthOfAreaWhereCanvasExtends : int
          {static} + getLinesMargins()
          {static} + getLinesPadding()
          {static} + getLinesStartHeight()
          {static} + getMusicClefHeight()
          {static} + getMusicClefHeight()
          {static} + getStartXofAreaWhereInsertingNotesIsLegal()
      }
    }
  }
  

  namespace SongCreatorWindow {
    namespace Model {
      class SongCreatorWindow.Model.ModelManager {
          + modelListeners : List<IModelEvent>
          + noteListeners : List<ISoundEvent>
          + pathListeners : List<IPathEvent>
          ~ musicPaths : List<Path>
          ~ projectDestination : String
          ~ projectName : String
          + ModelManager()
          + addListener()
          + addMusicSymbol()
          + addMusicSymbol()
          + changeMusicClefOfSelectedPath()
          + clearModel()
          + clearSelectionOfPath()
          + createPath()
          + createPath()
          + duplicateSelectedPath()
          {static} + exportProjectToMIDI()
          + extractEntireMusic()
          + fireOnModelLoaded()
          + getDefaultMusicKeySelection()
          + getIndexOfPath()
          + getIndexOfSelectedPath()
          + getLastPath()
          + getPathByIndex()
          + getPaths()
          + getProjectDestination()
          + getProjectName()
          + getSelectedPath()
          + getTheLatestTimeX()
          {static} + importProjectFromMIDI()
          {static} + loadProject()
          + recordPath()
          + removeSelectedPath()
          + renameSelectedPathName()
          + replaceExistingModel()
          {static} + saveProject()
          + setDefaultMusicKeySelection()
          + setProjectDestination()
          + setProjectName()
          + setSelectedPath()
          - fireOnCreatedPathEvent()
          - fireOnNoteAdded()
          - fireOnPathClearSelection()
          - fireOnPathClefChanged()
          - fireOnPathDeleted()
          - fireOnPathNameRenamed()
          - getBasePointSound()
          - getCalculatedSoundValue()
          {static} - getExtensionByString()
      }
    }
  }
  

  SongCreatorWindow.Model.ModelManager .up.|> java.io.Serializable
  SongCreatorWindow.Model.ModelManager o-- SongCreatorWindow.Model.Core.MusicClefSelection : selectedDefaultKey
  SongCreatorWindow.Model.ModelManager o-- SongCreatorWindow.Model.Core.Path : selectedPath


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
